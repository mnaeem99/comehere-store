import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { FormArray, FormBuilder, FormControl, Validators } from '@angular/forms';
import { MatDialog } from '@angular/material/dialog';

import { OrdersService } from '../orders.service';
import { IOrders } from '../iorders';
import { BaseDetailsComponent, FieldType, PickerDialogService } from 'src/app/common/shared';
import { ErrorService } from 'src/app/core/services/error.service';
import { GlobalPermissionService } from 'src/app/core/services/global-permission.service';

import { CustomersService } from 'src/app/entities/customers/customers.service';

@Component({
  selector: 'app-orders-details',
  templateUrl: './orders-details.component.html',
  styleUrls: ['./orders-details.component.scss'],
})
export class OrdersDetailsComponent extends BaseDetailsComponent<IOrders> implements OnInit {
  title = 'Orders';
  parentUrl = 'orders';
  constructor(
    public formBuilder: FormBuilder,
    public router: Router,
    public route: ActivatedRoute,
    public dialog: MatDialog,
    public ordersService: OrdersService,
    public pickerDialogService: PickerDialogService,
    public errorService: ErrorService,
    public customersService: CustomersService,
    public globalPermissionService: GlobalPermissionService
  ) {
    super(formBuilder, router, route, dialog, pickerDialogService, ordersService, errorService);
  }

  ngOnInit() {
    this.entityName = 'Orders';
    this.setAssociations();
    super.ngOnInit();
    this.setForm();
    this.getItem();
  }

  setForm() {
    this.itemForm = this.formBuilder.group({
      orderDate: [''],
      orderDateTime: [''],
      orderId: [{ value: '', disabled: true }, Validators.required],
      status: ['', Validators.required],
      total: ['', Validators.required],
      customerId: ['', Validators.required],
      customersDescriptiveField: ['', Validators.required],
    });

    this.fields = [
      {
        name: 'orderDate',
        label: 'order Date',
        isRequired: false,
        isAutoGenerated: false,
        type: FieldType.Date,
      },
      {
        name: 'orderDateTime',
        label: 'order Date Time',
        isRequired: false,
        isAutoGenerated: false,
        type: FieldType.Time,
      },
      {
        name: 'status',
        label: 'status',
        isRequired: true,
        isAutoGenerated: false,
        type: FieldType.String,
      },
      {
        name: 'total',
        label: 'total',
        isRequired: true,
        isAutoGenerated: false,
        type: FieldType.Number,
      },
    ];
  }

  onItemFetched(item: IOrders) {
    this.item = item;
    this.itemForm.get('orderDate')?.setValue(item.orderDate ? new Date(item.orderDate) : null);
    this.itemForm.get('orderDateTime')?.setValue(this.ordersService.formatDateStringToAMPM(item.orderDate));
    this.itemForm.patchValue(item);
  }

  setAssociations() {
    this.associations = [
      {
        column: [
          {
            key: 'customerId',
            value: undefined,
            referencedkey: 'customerId',
          },
        ],
        isParent: false,
        table: 'customers',
        type: 'ManyToOne',
        label: 'customers',
        service: this.customersService,
        descriptiveField: 'customersDescriptiveField',
        referencedDescriptiveField: 'email',
      },
      {
        column: [
          {
            key: 'orderId',
            value: undefined,
            referencedkey: 'orderId',
          },
        ],
        isParent: true,
        table: 'orderItems',
        type: 'OneToMany',
        label: 'orderItems',
      },
    ];

    this.childAssociations = this.associations.filter((association) => {
      return association.isParent;
    });

    this.parentAssociations = this.associations.filter((association) => {
      return !association.isParent;
    });
  }

  onSubmit() {
    let orders = this.itemForm.getRawValue();

    orders.orderDate = this.dataService.combineDateAndTime(orders.orderDate, orders.orderDateTime);
    delete orders.orderDateTime;

    super.onSubmit(orders);
  }
}
