import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { FormArray, FormBuilder, FormControl, Validators } from '@angular/forms';
import { MatDialog } from '@angular/material/dialog';

import { CustomersService } from '../customers.service';
import { ICustomers } from '../icustomers';
import { BaseDetailsComponent, FieldType, PickerDialogService } from 'src/app/common/shared';
import { ErrorService } from 'src/app/core/services/error.service';
import { GlobalPermissionService } from 'src/app/core/services/global-permission.service';

@Component({
  selector: 'app-customers-details',
  templateUrl: './customers-details.component.html',
  styleUrls: ['./customers-details.component.scss'],
})
export class CustomersDetailsComponent extends BaseDetailsComponent<ICustomers> implements OnInit {
  title = 'Customers';
  parentUrl = 'customers';
  constructor(
    public formBuilder: FormBuilder,
    public router: Router,
    public route: ActivatedRoute,
    public dialog: MatDialog,
    public customersService: CustomersService,
    public pickerDialogService: PickerDialogService,
    public errorService: ErrorService,
    public globalPermissionService: GlobalPermissionService
  ) {
    super(formBuilder, router, route, dialog, pickerDialogService, customersService, errorService);
  }

  ngOnInit() {
    this.entityName = 'Customers';
    this.setAssociations();
    super.ngOnInit();
    this.setForm();
    this.getItem();
  }

  setForm() {
    this.itemForm = this.formBuilder.group({
      address: [''],
      createdAt: [''],
      createdAtTime: [''],
      customerId: [{ value: '', disabled: true }, Validators.required],
      email: ['', Validators.required],
      firstName: ['', Validators.required],
      lastName: ['', Validators.required],
      phone: [''],
      updatedAt: [''],
      updatedAtTime: [''],
    });

    this.fields = [
      {
        name: 'address',
        label: 'address',
        isRequired: false,
        isAutoGenerated: false,
        type: FieldType.String,
      },
      {
        name: 'createdAt',
        label: 'created At',
        isRequired: false,
        isAutoGenerated: false,
        type: FieldType.Date,
      },
      {
        name: 'createdAtTime',
        label: 'created At Time',
        isRequired: false,
        isAutoGenerated: false,
        type: FieldType.Time,
      },
      {
        name: 'email',
        label: 'email',
        isRequired: true,
        isAutoGenerated: false,
        type: FieldType.String,
      },
      {
        name: 'firstName',
        label: 'first Name',
        isRequired: true,
        isAutoGenerated: false,
        type: FieldType.String,
      },
      {
        name: 'lastName',
        label: 'last Name',
        isRequired: true,
        isAutoGenerated: false,
        type: FieldType.String,
      },
      {
        name: 'phone',
        label: 'phone',
        isRequired: false,
        isAutoGenerated: false,
        type: FieldType.String,
      },
      {
        name: 'updatedAt',
        label: 'updated At',
        isRequired: false,
        isAutoGenerated: false,
        type: FieldType.Date,
      },
      {
        name: 'updatedAtTime',
        label: 'updated At Time',
        isRequired: false,
        isAutoGenerated: false,
        type: FieldType.Time,
      },
    ];
  }

  onItemFetched(item: ICustomers) {
    this.item = item;
    this.itemForm.get('createdAt')?.setValue(item.createdAt ? new Date(item.createdAt) : null);
    this.itemForm.get('createdAtTime')?.setValue(this.customersService.formatDateStringToAMPM(item.createdAt));
    this.itemForm.get('updatedAt')?.setValue(item.updatedAt ? new Date(item.updatedAt) : null);
    this.itemForm.get('updatedAtTime')?.setValue(this.customersService.formatDateStringToAMPM(item.updatedAt));
    this.itemForm.patchValue(item);
  }

  setAssociations() {
    this.associations = [
      {
        column: [
          {
            key: 'customerId',
            value: undefined,
            referencedkey: 'customerId',
          },
        ],
        isParent: true,
        table: 'orders',
        type: 'OneToMany',
        label: 'orders',
      },
    ];

    this.childAssociations = this.associations.filter((association) => {
      return association.isParent;
    });

    this.parentAssociations = this.associations.filter((association) => {
      return !association.isParent;
    });
  }

  onSubmit() {
    let customers = this.itemForm.getRawValue();

    customers.createdAt = this.dataService.combineDateAndTime(customers.createdAt, customers.createdAtTime);
    delete customers.createdAtTime;
    customers.updatedAt = this.dataService.combineDateAndTime(customers.updatedAt, customers.updatedAtTime);
    delete customers.updatedAtTime;

    super.onSubmit(customers);
  }
}
