import { Component, OnInit, Inject } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { FormArray, FormBuilder, FormControl, Validators } from '@angular/forms';
import { MatDialogRef, MatDialog, MAT_DIALOG_DATA } from '@angular/material/dialog';

import { InventoryService } from '../inventory.service';
import { IInventory } from '../iinventory';
import { BaseNewComponent, FieldType, PickerDialogService } from 'src/app/common/shared';
import { ErrorService } from 'src/app/core/services/error.service';
import { GlobalPermissionService } from 'src/app/core/services/global-permission.service';

import { ProductsService } from 'src/app/entities/products/products.service';
import { SuppliersService } from 'src/app/entities/suppliers/suppliers.service';

@Component({
  selector: 'app-inventory-new',
  templateUrl: './inventory-new.component.html',
  styleUrls: ['./inventory-new.component.scss'],
})
export class InventoryNewComponent extends BaseNewComponent<IInventory> implements OnInit {
  title: string = 'New Inventory';
  constructor(
    public formBuilder: FormBuilder,
    public router: Router,
    public route: ActivatedRoute,
    public dialog: MatDialog,
    public dialogRef: MatDialogRef<InventoryNewComponent>,
    @Inject(MAT_DIALOG_DATA) public data: any,
    public pickerDialogService: PickerDialogService,
    public inventoryService: InventoryService,
    public errorService: ErrorService,
    public productsService: ProductsService,
    public suppliersService: SuppliersService,
    public globalPermissionService: GlobalPermissionService
  ) {
    super(formBuilder, router, route, dialog, dialogRef, data, pickerDialogService, inventoryService, errorService);
  }

  ngOnInit() {
    this.entityName = 'Inventory';
    this.setAssociations();
    super.ngOnInit();
    this.setForm();
    this.checkPassedData();
  }

  setForm() {
    this.itemForm = this.formBuilder.group({
      lastRestocked: [''],
      lastRestockedTime: ['12:00 AM'],
      quantity: ['', Validators.required],
      productId: ['', Validators.required],
      productsDescriptiveField: ['', Validators.required],
      supplierId: ['', Validators.required],
      suppliersDescriptiveField: ['', Validators.required],
    });

    this.fields = [
      {
        name: 'lastRestocked',
        label: 'last Restocked',
        isRequired: false,
        isAutoGenerated: false,
        type: FieldType.Date,
      },
      {
        name: 'lastRestockedTime',
        label: 'last Restocked Time',
        isRequired: false,
        isAutoGenerated: false,
        type: FieldType.Time,
      },
      {
        name: 'quantity',
        label: 'quantity',
        isRequired: true,
        isAutoGenerated: false,
        type: FieldType.Number,
      },
    ];
  }

  setAssociations() {
    this.associations = [
      {
        column: [
          {
            key: 'productId',
            value: undefined,
            referencedkey: 'productId',
          },
        ],
        isParent: false,
        table: 'products',
        type: 'ManyToOne',
        service: this.productsService,
        label: 'products',
        descriptiveField: 'productsDescriptiveField',
        referencedDescriptiveField: 'productId',
      },
      {
        column: [
          {
            key: 'supplierId',
            value: undefined,
            referencedkey: 'supplierId',
          },
        ],
        isParent: false,
        table: 'suppliers',
        type: 'ManyToOne',
        service: this.suppliersService,
        label: 'suppliers',
        descriptiveField: 'suppliersDescriptiveField',
        referencedDescriptiveField: 'supplierId',
      },
    ];
    this.parentAssociations = this.associations.filter((association) => {
      return !association.isParent;
    });
  }

  onSubmit() {
    let inventory = this.itemForm.getRawValue();

    inventory.lastRestocked = this.dataService.combineDateAndTime(inventory.lastRestocked, inventory.lastRestockedTime);
    delete inventory.lastRestockedTime;

    super.onSubmit(inventory);
  }
}
