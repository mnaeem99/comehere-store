import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { FormArray, FormBuilder, FormControl, Validators } from '@angular/forms';
import { MatDialog } from '@angular/material/dialog';

import { OrderItemsService } from '../order-items.service';
import { IOrderItems } from '../iorder-items';
import { BaseDetailsComponent, FieldType, PickerDialogService } from 'src/app/common/shared';
import { ErrorService } from 'src/app/core/services/error.service';
import { GlobalPermissionService } from 'src/app/core/services/global-permission.service';

import { OrdersService } from 'src/app/entities/orders/orders.service';
import { ProductsService } from 'src/app/entities/products/products.service';

@Component({
  selector: 'app-order-items-details',
  templateUrl: './order-items-details.component.html',
  styleUrls: ['./order-items-details.component.scss'],
})
export class OrderItemsDetailsComponent extends BaseDetailsComponent<IOrderItems> implements OnInit {
  title = 'OrderItems';
  parentUrl = 'orderitems';
  constructor(
    public formBuilder: FormBuilder,
    public router: Router,
    public route: ActivatedRoute,
    public dialog: MatDialog,
    public orderItemsService: OrderItemsService,
    public pickerDialogService: PickerDialogService,
    public errorService: ErrorService,
    public ordersService: OrdersService,
    public productsService: ProductsService,
    public globalPermissionService: GlobalPermissionService
  ) {
    super(formBuilder, router, route, dialog, pickerDialogService, orderItemsService, errorService);
  }

  ngOnInit() {
    this.entityName = 'OrderItems';
    this.setAssociations();
    super.ngOnInit();
    this.setForm();
    this.getItem();
  }

  setForm() {
    this.itemForm = this.formBuilder.group({
      orderItemId: [{ value: '', disabled: true }, Validators.required],
      price: ['', Validators.required],
      quantity: ['', Validators.required],
      orderId: ['', Validators.required],
      ordersDescriptiveField: ['', Validators.required],
      productId: ['', Validators.required],
      productsDescriptiveField: ['', Validators.required],
    });

    this.fields = [
      {
        name: 'price',
        label: 'price',
        isRequired: true,
        isAutoGenerated: false,
        type: FieldType.Number,
      },
      {
        name: 'quantity',
        label: 'quantity',
        isRequired: true,
        isAutoGenerated: false,
        type: FieldType.Number,
      },
    ];
  }

  onItemFetched(item: IOrderItems) {
    this.item = item;
    this.itemForm.patchValue(item);
  }

  setAssociations() {
    this.associations = [
      {
        column: [
          {
            key: 'orderId',
            value: undefined,
            referencedkey: 'orderId',
          },
        ],
        isParent: false,
        table: 'orders',
        type: 'ManyToOne',
        label: 'orders',
        service: this.ordersService,
        descriptiveField: 'ordersDescriptiveField',
        referencedDescriptiveField: 'orderId',
      },
      {
        column: [
          {
            key: 'productId',
            value: undefined,
            referencedkey: 'productId',
          },
        ],
        isParent: false,
        table: 'products',
        type: 'ManyToOne',
        label: 'products',
        service: this.productsService,
        descriptiveField: 'productsDescriptiveField',
        referencedDescriptiveField: 'productId',
      },
    ];

    this.childAssociations = this.associations.filter((association) => {
      return association.isParent;
    });

    this.parentAssociations = this.associations.filter((association) => {
      return !association.isParent;
    });
  }

  onSubmit() {
    let orderItems = this.itemForm.getRawValue();

    super.onSubmit(orderItems);
  }
}
